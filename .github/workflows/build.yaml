name: "CI"

# The workflow should be triggered on any push and release events.
# Release events can push tags (triggering a push event).
# Therefore:
#  - docker-publish-staging – is only triggered on push events to main branch
#  - docker-publish-release – is only triggered on release events
on:
  push:
  pull_request:
  release:
    types: [ released ]

jobs:
  flake8:
    name: flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install flake8
      - name: flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: flake8

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install isort
      - name: isort
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: isort --check --profile black src/

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install black
      - name: black
        run: black --check src/

  django-check:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      SECRET_KEY: 'insecure_key_for_dev'
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      AWS_ACCESS_KEY_ID: 'example-aws-access-key-id'
      AWS_SECRET_ACCESS_KEY: 'example-aws-secret-access-key'
      AWS_STORAGE_BUCKET_NAME: 'example-aws-storage-bucket-name'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install -U wheel setuptools
          pip install -r requirements-dev.txt
      - name: Run mypy
        run: mypy --strict src/chains src/safe_apps
      - name: Check pending migrations
        run: python src/manage.py makemigrations --check --dry-run
      - name: Run migrations
        run: python src/manage.py migrate
      - name: Django System Check
        run: python src/manage.py check
      - name: Run tests with coverage
        run: coverage run -m pytest src
      - name: Upload coverage
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github

  docker-publish:
    needs: [ flake8, isort, black, django-check ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - uses: rlespinasse/github-slug-action@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: ${{ steps.vars.outputs.sha_short }}, ${{ env.GITHUB_REF_SLUG_URL }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
